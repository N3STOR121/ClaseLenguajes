Esta documentación te guiará para utilizar una cámara OV7670 con el Arduino Nano 33, permitiéndote capturar y transmitir imágenes en formato RGB565. Usaremos la biblioteca Arduino_OV767X para interactuar con la cámara y Processing para visualizar las imágenes en tiempo real.

Componentes necesarios
Arduino Nano 33
Cámara OV7670
Kit de aprendizaje de máquina Arduino Tiny
Cable USB para Arduino
Cable de conexión para la cámara
Instalación de bibliotecas
Antes de comenzar, asegúrate de tener las siguientes bibliotecas instaladas en el IDE de Arduino:

Arduino_OV767X
Puedes instalar estas bibliotecas desde el gestor de bibliotecas del IDE de Arduino.

Conexiones
Realiza las conexiones entre la cámara OV7670 y el Arduino Nano 33 según las especificaciones de tu módulo de cámara y la disposición de pines del Arduino. Asegúrate de conectar correctamente los pines de alimentación, tierra, y comunicación.

Código Arduino
Este código configura la cámara para capturar imágenes en formato QCIF (176x144) y transmite los datos en formato RGB565 a través del puerto serial.
//OV767X - Camera Capture Raw Bytes
//Proyecto Final
//Bonilla Castañeda Nestor Miguel

#include <Arduino_OV767X.h>

int bytesPerFrame;

byte data[176 * 144 * 2]; // QVGA: 320x240 X 2 bytes per pixel (RGB565)

void setup() {
  Serial.begin(460800 ); 
  while (!Serial);

  if (!Camera.begin(QCIF, RGB565, 1)) {
    Serial.println("Failed to initialize camera!");
    while (1);
  }

  bytesPerFrame = Camera.width() * Camera.height() * Camera.bytesPerPixel();

  Camera.testPattern();
}

void loop() {
  Camera.readFrame(data);
  Serial.write(data, bytesPerFrame);
}

Código Processing
Este código en Processing recibe los datos enviados por el Arduino a través del puerto serial, los interpreta y muestra la imagen.
import processing.serial.*;  // Importa la biblioteca para la comunicación serial
import java.nio.ByteBuffer;  // Importa ByteBuffer para manejar los bytes de manera eficiente
import java.nio.ByteOrder;   // Importa ByteOrder para especificar el orden de los bytes

Serial myPort;  // Crea un objeto Serial para gestionar la comunicación serial

// Constantes para especificar las dimensiones y formato de los datos de la imagen
final int cameraWidth = 176;   // Ancho de la imagen capturada por la cámara
final int cameraHeight = 144;  // Alto de la imagen capturada por la cámara
final int cameraBytesPerPixel = 2;  // Bytes por píxel, RGB565 utiliza 2 bytes
final int bytesPerFrame = cameraWidth * cameraHeight * cameraBytesPerPixel;  // Total de bytes por imagen

PImage myImage;  // Imagen donde se mostrarán los datos
byte[] frameBuffer = new byte[bytesPerFrame];  // Buffer para almacenar los datos de un frame completo

void setup() {
  size(320, 240);  // Establece el tamaño de la ventana de la aplicación

  // Inicializa el puerto serial para comunicarse con la cámara
  myPort = new Serial(this, "COM13", 460800);  // Configura el puerto y la velocidad de transmisión

  // Configura el buffer de serial para que espere recibir un frame completo de bytes
  myPort.buffer(bytesPerFrame);  

  // Crea un objeto PImage con el tamaño especificado y formato de color RGB
  myImage = createImage(cameraWidth, cameraHeight, RGB);
}

void draw() {
  image(myImage, 0, 0);  // Dibuja la imagen en la ventana de la aplicación
}

void serialEvent(Serial myPort) {
  // Lee los bytes recibidos por el puerto serial al buffer de frame
  myPort.readBytes(frameBuffer);

  // Prepara el ByteBuffer para manipular los bytes del frame
  ByteBuffer bb = ByteBuffer.wrap(frameBuffer);
  bb.order(ByteOrder.BIG_ENDIAN);  // Especifica que los bytes más significativos vienen primero

  int i = 0;  // Índice para iterar sobre los píxeles de la imagen

  // Mientras haya bytes restantes en el buffer
  while (bb.hasRemaining()) {
    // Lee un píxel en formato RGB565
    short p = bb.getShort();

    // Convierte RGB565 a RGB888 para obtener los valores de color en 8 bits
    int r = ((p >> 11) & 0x1f) << 3;  // Extrae y convierte el componente rojo
    int g = ((p >> 5) & 0x3f) << 2;   // Extrae y convierte el componente verde
    int b = ((p & 0x1f) << 3);        // Extrae y convierte el componente azul

    // Asigna el color al píxel correspondiente en la imagen
    myImage.pixels[i++] = color(r, g, b);
  }
  // Actualiza la imagen con los nuevos píxeles procesados
  myImage.updatePixels();
}

Explicación del Código
Arduino:

Inicializa la cámara y la configura para capturar imágenes en formato QCIF y RGB565.
Captura un frame de la cámara y lo envía a través del puerto serial.
Processing:

Configura el puerto serial para recibir los datos enviados por el Arduino.
Cada vez que se recibe un frame completo, los datos se procesan para convertirlos de RGB565 a RGB888 y se muestran en una ventana.


